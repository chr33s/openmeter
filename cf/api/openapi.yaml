openapi: 3.0.0
info:
  title: OpenMeter Cloudflare Workers API
  version: 1.0.0
  description: |
    OpenMeter API implementation using Cloudflare Workers, D1, and KV.

    This API provides usage metering and billing capabilities with:
    - Real-time event ingestion
    - Flexible meter configurations
    - Subject and feature management
    - Usage analytics and reporting
  contact:
    name: OpenMeter Team
    url: https://openmeter.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://your-worker.your-subdomain.workers.dev
    description: Production server
  - url: http://localhost:8787
    description: Development server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /health:
    get:
      tags: [System]
      summary: Health check
      description: Check the health status of the API and its dependencies
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

  /docs:
    get:
      tags: [System]
      summary: API documentation
      description: Get API documentation and endpoint information
      responses:
        "200":
          description: API documentation
          content:
            application/json:
              schema:
                type: object

  /metrics:
    get:
      tags: [System]
      summary: Get metrics
      description: Get application metrics in JSON or Prometheus format
      parameters:
        - name: format
          in: query
          description: Output format
          schema:
            type: string
            enum: [json, prometheus]
            default: json
      responses:
        "200":
          description: Metrics data
          content:
            application/json:
              schema:
                type: object
            text/plain:
              schema:
                type: string

  /api/v1/meters:
    get:
      tags: [Meters]
      summary: List meters
      description: Get a paginated list of meters
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Search"
        - name: aggregation
          in: query
          description: Filter by aggregation type
          schema:
            $ref: "#/components/schemas/MeterAggregation"
      responses:
        "200":
          description: List of meters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMeterResponse"

    post:
      tags: [Meters]
      summary: Create meter
      description: Create a new meter configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMeterRequest"
      responses:
        "201":
          description: Meter created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
        "409":
          description: Meter with key already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/meters/{id}:
    get:
      tags: [Meters]
      summary: Get meter
      description: Get a meter by ID
      parameters:
        - $ref: "#/components/parameters/MeterId"
      responses:
        "200":
          description: Meter details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
        "404":
          description: Meter not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags: [Meters]
      summary: Update meter
      description: Update an existing meter (admin only)
      parameters:
        - $ref: "#/components/parameters/MeterId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMeterRequest"
      responses:
        "200":
          description: Meter updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meter"
        "404":
          description: Meter not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags: [Meters]
      summary: Delete meter
      description: Soft delete a meter (admin only)
      parameters:
        - $ref: "#/components/parameters/MeterId"
      responses:
        "200":
          description: Meter deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
                  deletedAt:
                    type: string
                    format: date-time

  /api/v1/events:
    get:
      tags: [Events]
      summary: Query events
      description: Get events with optional filtering
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - name: meterId
          in: query
          description: Filter by meter ID
          schema:
            type: string
        - name: subjectId
          in: query
          description: Filter by subject ID
          schema:
            type: string
        - name: from
          in: query
          description: Start time filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End time filter (ISO 8601)
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: List of events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedEventResponse"

    post:
      tags: [Events]
      summary: Ingest event
      description: Ingest a single usage event
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IngestEventRequest"
      responses:
        "201":
          description: Event ingested successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngestEventResponse"

  /api/v1/events/batch:
    post:
      tags: [Events]
      summary: Ingest batch events
      description: Ingest multiple usage events in a single request
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchIngestEventRequest"
      responses:
        "201":
          description: All events ingested successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchIngestEventResponse"
        "207":
          description: Partial success (some events failed)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchIngestEventResponse"
